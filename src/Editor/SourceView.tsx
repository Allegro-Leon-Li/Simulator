import React, { FunctionComponent, useRef } from "react";
import { useSelector } from "react-redux";
import { getCode } from "../JavascriptVM/vmSlice";
import SyntaxHighlighter from "react-syntax-highlighter";

import "./SourceView.css";
import { BLOCKLY_HIGHLIGHT_PREFIX } from "../BlocklyInterface/BlocklyInstance";

/**
 * Removes any occurrences of the BLOCKLY_HIGHLIGHT_PREFIX in the
 * provided code.
 *
 * @param blocklyCode Code that might contain BLOCKLY_HIGHLIGHT_PREFIX
 * statements.
 *
 * @returns A string that is identical to the provided 'blocklyCode',
 * but without BLOCKLY_HIGHLIGHT_PREFIX statements.
 */
function removeHighlightBlockCalls(blocklyCode: string | null): string {
  if (!blocklyCode) return "";

  const blocklyCodeLines: Array<string> = blocklyCode.split("\n");
  let output: string = "";
  for (let i = 0; i < blocklyCodeLines.length; ++i) {
    if (blocklyCodeLines[i].includes(BLOCKLY_HIGHLIGHT_PREFIX)) {
      continue;
    }

    output += blocklyCodeLines[i];

    // Avoid superfluous linebreak at the end of the code
    if (i + 1 !== blocklyCodeLines.length) {
      output += "\n";
    }
  }
  return output;
}

/**
 * Read-only view for the source code generated by Blockly.
 */
export const SourceView: FunctionComponent = () => {
  const wrapperRef = useRef<HTMLDivElement>(null);

  const code = useSelector(getCode);

  return (
    <div
      ref={wrapperRef}
      className={"source-view"}
      title={"Generated source code is read-only"}
    >
      <SyntaxHighlighter
        language="javascript"
        showLineNumbers={true}
        customStyle={{ margin: 0, padding: "1em", height: "100%" }}
      >
        {removeHighlightBlockCalls(code)}
      </SyntaxHighlighter>
    </div>
  );
};
